---
rbac:
  create: true
  readSecrets: true # Required to allow the plugin kubernetes-credentials-provider to read Kubernetes secrets
controller:
  image: "dduportal/jenkins-k8s"
  tag: "latest"
  imagePullPolicy: "IfNotPresent" # Avoid Always if you use an image built locally and loaded in k3d from the local cache
  jenkinsUrl: http://localhost
  jenkinsAdminEmail: noreply@localhost.local
  installPlugins: []
  ingress:
    enabled: true
    hostName: localhost
  numExecutors: 0
  executorMode: "EXCLUSIVE"
  sidecars:
    configAutoReload:
      enabled: true
  JCasC:
    securityRealm: |-
      local:
        allowsSignup: false
        enableCaptcha: false
        users:
        - id: "butler"
          name: "Jenkins Admin"
          password: "butler"
    authorizationStrategy: |-
      loggedInUsersCanDoAnything:
        allowAnonymousRead: false
    configScripts:
      pipeline-library: |
        unclassified:
          globalLibraries:
            libraries:
              - defaultVersion: "master"
                implicit: true
                name: "pipeline-library"
                retriever:
                  modernSCM:
                    scm:
                      git:
                        id: "github-access-token"
                        remote: "https://github.com/jenkins-infra/pipeline-library.git"
      jobs: |
        jobs:
           - script: >
              multibranchPipelineJob('test') {
                displayName "test"
                description "Test Multibranch"
                branchSources {
                  github {
                    id('20200302')
                    repoOwner('dduportal')
                    repository('aws')
                  }
                }
                factory {
                  workflowBranchProjectFactory {
                    scriptPath('Jenkinsfile_k8s')
                  }
                }
                configure { node ->
                  def traits = node / 'sources' / 'data' / 'jenkins.branch.BranchSource' / 'source' / 'traits'
                  traits << 'org.jenkinsci.plugins.github__branch__source.BranchDiscoveryTrait' {
                    strategyId(1)
                  }
                  traits << 'org.jenkinsci.plugins.github__branch__source.OriginPullRequestDiscoveryTrait' {
                    strategyId(1)
                  }
                  traits << 'org.jenkinsci.plugins.github__branch__source.ForkPullRequestDiscoveryTrait' {
                    strategyId(1)
                    trust(class: 'org.jenkinsci.plugins.github_branch_source.ForkPullRequestDiscoveryTrait$TrustPermission')
                  }
                  traits << 'org.jenkinsci.plugins.github__branch__source.ExcludeArchivedRepositoriesTrait' {
                  }
                  traits << 'org.jenkinsci.plugins.github.label.filter.PullRequestLabelsBlackListFilterTrait' {
                    labels('on-hold ci-skip')
                  }
                }
              }
...
